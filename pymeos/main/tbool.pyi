from pymeos_cffi import *
from ..collections import *
from ..temporal import TInstant as TInstant, TInterpolation as TInterpolation, TSequence as TSequence, TSequenceSet as TSequenceSet, Temporal as Temporal
from _typeshed import Incomplete
from abc import ABC
from typing import TypeVar, overload

Self = TypeVar('Self', bound='TBool')

class TBool(Temporal[bool, 'TBool', 'TBoolInst', 'TBoolSeq', 'TBoolSeqSet'], ABC):
    BaseClass = bool
    def __init__(self, _inner) -> None: ...
    @staticmethod
    def from_base_temporal(value: bool, base: Temporal) -> TBool: ...
    @staticmethod
    @overload
    def from_base_time(value: bool, base: datetime) -> TBoolInst: ...
    @staticmethod
    @overload
    def from_base_time(value: bool, base: TsTzSet | TsTzSpan) -> TBoolSeq: ...
    @staticmethod
    @overload
    def from_base_time(value: bool, base: TsTzSpanSet) -> TBoolSeqSet: ...
    @classmethod
    def from_mfjson(cls, mfjson: str) -> Self: ...
    def as_wkt(self): ...
    def value_set(self) -> set[bool]: ...
    def start_value(self) -> bool: ...
    def end_value(self) -> bool: ...
    def value_at_timestamp(self, timestamp) -> bool: ...
    def always_eq(self, value: bool | TBool) -> bool: ...
    def ever_eq(self, value: bool | TBool) -> bool: ...
    def never_eq(self, value: bool | TBool) -> bool: ...
    def temporal_equal(self, other: bool | TBool) -> TBool: ...
    def temporal_not_equal(self, other: bool | TBool) -> TBool: ...
    def at(self, other: bool | Time) -> TBool: ...
    def minus(self, other: bool | Time) -> TBool: ...
    def temporal_and(self, other: bool | TBool) -> TBool: ...
    def __and__(self, other): ...
    def temporal_or(self, other: bool | TBool) -> TBool: ...
    def __or__(self, other): ...
    def temporal_not(self) -> TBool: ...
    def __neg__(self): ...
    def __invert__(self): ...
    def when_true(self) -> TsTzSpanSet | None: ...
    def when_false(self) -> TsTzSpanSet | None: ...
    @staticmethod
    def read_from_cursor(value, _: Incomplete | None = None): ...

class TBoolInst(TInstant[bool, 'TBool', 'TBoolInst', 'TBoolSeq', 'TBoolSeqSet'], TBool):
    def __init__(self, string: str | None = None, *, value: str | bool | None = None, timestamp: str | datetime | None = None, _inner: Incomplete | None = None) -> None: ...

class TBoolSeq(TSequence[bool, 'TBool', 'TBoolInst', 'TBoolSeq', 'TBoolSeqSet'], TBool):
    ComponentClass = TBoolInst
    def __init__(self, string: str | None = None, *, instant_list: list[str | TBoolInst] | None = None, lower_inc: bool = True, upper_inc: bool = False, interpolation: TInterpolation = ..., normalize: bool = True, _inner: Incomplete | None = None) -> None: ...

class TBoolSeqSet(TSequenceSet[bool, 'TBool', 'TBoolInst', 'TBoolSeq', 'TBoolSeqSet'], TBool):
    ComponentClass = TBoolSeq
    def __init__(self, string: str | None = None, *, sequence_list: list[str | TBoolSeq] | None = None, normalize: bool = True, _inner: Incomplete | None = None) -> None: ...
