from pymeos_cffi import *
from ..collections import *
from ..mixins import TTemporallyComparable as TTemporallyComparable
from ..temporal import TInstant as TInstant, TInterpolation as TInterpolation, TSequence as TSequence, TSequenceSet as TSequenceSet, Temporal as Temporal
from .tbool import TBool as TBool
from _typeshed import Incomplete
from abc import ABC
from typing import TypeVar, overload

Self = TypeVar('Self', bound='TText')

class TText(Temporal[str, 'TText', 'TTextInst', 'TTextSeq', 'TTextSeqSet'], TTemporallyComparable, ABC):
    BaseClass = str
    def __init__(self, _inner) -> None: ...
    @staticmethod
    def from_base_temporal(value: str, base: Temporal) -> TText: ...
    @staticmethod
    @overload
    def from_base_time(value: str, base: datetime) -> TTextInst: ...
    @staticmethod
    @overload
    def from_base_time(value: str, base: TsTzSet | TsTzSpan) -> TTextSeq: ...
    @staticmethod
    @overload
    def from_base_time(value: str, base: TsTzSpanSet) -> TTextSeqSet: ...
    @classmethod
    def from_mfjson(cls, mfjson: str) -> Self: ...
    def as_wkt(self) -> str: ...
    def value_set(self) -> set[str]: ...
    def min_value(self) -> str: ...
    def max_value(self) -> str: ...
    def start_value(self) -> str: ...
    def end_value(self) -> str: ...
    def upper(self) -> TText: ...
    def lower(self) -> TText: ...
    def value_at_timestamp(self, timestamp: datetime) -> str: ...
    def always_less(self, value: str | TText) -> bool: ...
    def always_less_or_equal(self, value: str | TText) -> bool: ...
    def always_equal(self, value: str | TText) -> bool: ...
    def always_not_equal(self, value: str | TText) -> bool: ...
    def always_greater_or_equal(self, value: str | TText) -> bool: ...
    def always_greater(self, value: str | TText) -> bool: ...
    def ever_less(self, value: str | TText) -> bool: ...
    def ever_less_or_equal(self, value: str | TText) -> bool: ...
    def ever_equal(self, value: str | TText) -> bool: ...
    def ever_not_equal(self, value: str | TText) -> bool: ...
    def ever_greater_or_equal(self, value: str | TText) -> bool: ...
    def ever_greater(self, value: str | TText) -> bool: ...
    def never_less(self, value: str | TText) -> bool: ...
    def never_less_or_equal(self, value: str | TText) -> bool: ...
    def never_equal(self, value: str | TText) -> bool: ...
    def never_not_equal(self, value: str | TText) -> bool: ...
    def never_greater_or_equal(self, value: str | TText) -> bool: ...
    def never_greater(self, value: str | TText) -> bool: ...
    def temporal_equal(self, other: str | TText) -> TBool: ...
    def temporal_not_equal(self, other: str | TText) -> TBool: ...
    def temporal_less(self, other: str | TText) -> TBool: ...
    def temporal_less_or_equal(self, other: str | TText) -> TBool: ...
    def temporal_greater(self, other: str | TText) -> TBool: ...
    def temporal_greater_or_equal(self, other: str | TText) -> TBool: ...
    def at(self, other: str | list[str] | datetime | TsTzSet | TsTzSpan | TsTzSpanSet) -> TText: ...
    def minus(self, other: str | list[str] | datetime | TsTzSet | TsTzSpan | TsTzSpanSet) -> TText: ...
    def concatenate(self, other: str | TText, other_before: bool = False): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    @staticmethod
    def read_from_cursor(value, _: Incomplete | None = None): ...

class TTextInst(TInstant[str, 'TText', 'TTextInst', 'TTextSeq', 'TTextSeqSet'], TText):
    def __init__(self, string: str | None = None, *, value: str | None = None, timestamp: str | datetime | None = None, _inner: Incomplete | None = None) -> None: ...

class TTextSeq(TSequence[str, 'TText', 'TTextInst', 'TTextSeq', 'TTextSeqSet'], TText):
    ComponentClass = TTextInst
    def __init__(self, string: str | None = None, *, instant_list: list[str | TTextInst] | None = None, lower_inc: bool = True, upper_inc: bool = False, interpolation: TInterpolation = ..., normalize: bool = True, _inner: Incomplete | None = None) -> None: ...

class TTextSeqSet(TSequenceSet[str, 'TText', 'TTextInst', 'TTextSeq', 'TTextSeqSet'], TText):
    ComponentClass = TTextSeq
    def __init__(self, string: str | None = None, *, sequence_list: list[str | TTextSeq] | None = None, normalize: bool = True, _inner: Incomplete | None = None) -> None: ...
