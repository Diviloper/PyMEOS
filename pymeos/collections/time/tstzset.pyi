from pymeos_cffi import *
from ...boxes import Box as Box
from ...temporal import Temporal as Temporal
from ..base import Set as Set
from .time import Time as Time
from .timecollection import TimeCollection as TimeCollection
from .tstzspan import TsTzSpan as TsTzSpan
from .tstzspanset import TsTzSpanSet as TsTzSpanSet
from datetime import datetime, timedelta
from dateutil.parser import parse as parse
from typing import overload

class TsTzSet(Set[datetime], TimeCollection[datetime]):
    def duration(self) -> timedelta: ...
    def start_element(self) -> datetime: ...
    def end_element(self) -> datetime: ...
    def element_n(self, n: int) -> datetime: ...
    def elements(self) -> list[datetime]: ...
    def shift(self, delta: timedelta) -> TsTzSet: ...
    def scale(self, duration: timedelta) -> TsTzSet: ...
    def shift_scale(self, shift: timedelta | None = None, duration: timedelta | None = None) -> TsTzSet: ...
    def is_adjacent(self, other: TsTzSpan | TsTzSpanSet | Temporal | Box) -> bool: ...
    def is_contained_in(self, container: TsTzSpan | TsTzSpanSet | TsTzSet | Temporal | Box) -> bool: ...
    def contains(self, content: datetime | TsTzSet | Temporal) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other: TsTzSpan | TsTzSpanSet | TsTzSet | Temporal | Box) -> bool: ...
    def is_same(self, other: Time | Temporal | Box) -> bool: ...
    def is_left(self, other: Time | Temporal | Box) -> bool: ...
    def is_over_or_left(self, other: Time | Temporal | Box) -> bool: ...
    def is_over_or_right(self, other: Time | Temporal | Box) -> bool: ...
    def is_right(self, other: Time | Temporal | Box) -> bool: ...
    def distance(self, other: Time | Temporal | Box) -> timedelta: ...
    @overload
    def intersection(self, other: datetime) -> datetime | None: ...
    @overload
    def intersection(self, other: TsTzSet) -> TsTzSet | None: ...
    @overload
    def intersection(self, other: TsTzSpan | TsTzSpanSet | Temporal | Box) -> TsTzSpanSet | None: ...
    @overload
    def minus(self, other: datetime | TsTzSet) -> TsTzSet | None: ...
    @overload
    def minus(self, other: TsTzSpan | TsTzSpanSet | Temporal | Box) -> TsTzSpanSet | None: ...
    def subtract_from(self, other: datetime) -> datetime | None: ...
    @overload
    def union(self, other: datetime | TsTzSet) -> TsTzSet: ...
    @overload
    def union(self, other: TsTzSpan | TsTzSpanSet | Temporal | Box) -> TsTzSpanSet: ...
    def plot(self, *args, **kwargs): ...
