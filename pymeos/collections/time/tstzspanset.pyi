from pymeos_cffi import *
from ...boxes import Box as Box
from ...temporal import Temporal as Temporal
from ..base.spanset import SpanSet as SpanSet
from .time import Time as Time
from .timecollection import TimeCollection as TimeCollection
from .tstzset import TsTzSet as TsTzSet
from .tstzspan import TsTzSpan as TsTzSpan
from datetime import datetime, timedelta
from typing import overload

class TsTzSpanSet(SpanSet[datetime], TimeCollection[datetime]):
    def to_span(self) -> TsTzSpan: ...
    def to_tstzspan(self) -> TsTzSpan: ...
    def duration(self, ignore_gaps: bool | None = False) -> timedelta: ...
    def num_timestamps(self) -> int: ...
    def start_timestamp(self) -> datetime: ...
    def end_timestamp(self) -> datetime: ...
    def timestamp_n(self, n: int) -> datetime: ...
    def timestamps(self) -> TsTzSet: ...
    def start_span(self) -> TsTzSpan: ...
    def end_span(self) -> TsTzSpan: ...
    def span_n(self, n: int) -> TsTzSpan: ...
    def spans(self) -> list[TsTzSpan]: ...
    def shift(self, delta: timedelta) -> TsTzSpanSet: ...
    def scale(self, duration: timedelta) -> TsTzSpanSet: ...
    def shift_scale(self, shift: timedelta | None = None, duration: timedelta | None = None) -> TsTzSpanSet: ...
    def is_adjacent(self, other: Time | Box | Temporal) -> bool: ...
    def is_contained_in(self, container: Time | Box | Temporal) -> bool: ...
    def contains(self, content: Time | Box | Temporal) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other: Time | Box | Temporal) -> bool: ...
    def is_same(self, other: Time | Box | Temporal) -> bool: ...
    def is_left(self, other: Time | Box | Temporal) -> bool: ...
    def is_over_or_left(self, other: Time | Box | Temporal) -> bool: ...
    def is_over_or_right(self, other: Time | Box | Temporal) -> bool: ...
    def is_right(self, other: Time | Box | Temporal) -> bool: ...
    def distance(self, other: Time | Box | Temporal) -> timedelta: ...
    @overload
    def intersection(self, other: TsTzSpan) -> TsTzSpanSet: ...
    @overload
    def intersection(self, other: TsTzSpanSet) -> TsTzSpanSet: ...
    @overload
    def intersection(self, other: datetime) -> datetime: ...
    def __mul__(self, other): ...
    def minus(self, other: Time) -> TsTzSpanSet: ...
    def __sub__(self, other): ...
    def union(self, other: Time) -> TsTzSpanSet: ...
    def __add__(self, other): ...
    def plot(self, *args, **kwargs): ...
