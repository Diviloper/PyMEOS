from ..base import Set as Set
from .datespan import DateSpan as DateSpan
from .datespanset import DateSpanSet as DateSpanSet
from .time import TimeDate as TimeDate
from .timecollection import TimeCollection as TimeCollection
from .tstzspan import TsTzSpan as TsTzSpan
from .tstzspanset import TsTzSpanSet as TsTzSpanSet
from datetime import date, datetime, timedelta
from dateutil.parser import parse as parse
from typing import overload

class DateSet(Set[date], TimeCollection[date]):
    def duration(self) -> timedelta: ...
    def start_element(self) -> date: ...
    def end_element(self) -> date: ...
    def element_n(self, n: int) -> date: ...
    def elements(self) -> list[date]: ...
    def shift(self, delta: timedelta | int) -> DateSet: ...
    def scale(self, duration: timedelta | int) -> DateSet: ...
    def shift_scale(self, shift: int | timedelta | None = None, duration: int | timedelta | None = None) -> DateSet: ...
    def contains(self, content: date | datetime | DateSet) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other: date | DateSet | DateSpan | DateSpanSet) -> bool: ...
    def is_left(self, other: TimeDate) -> bool: ...
    def is_over_or_left(self, other: TimeDate) -> bool: ...
    def is_over_or_right(self, other: TimeDate) -> bool: ...
    def is_right(self, other: TimeDate) -> bool: ...
    def distance(self, other: TimeDate) -> timedelta: ...
    @overload
    def intersection(self, other: date | DateSet) -> DateSet | None: ...
    @overload
    def intersection(self, other: DateSpan | DateSpanSet) -> DateSpanSet | None: ...
    @overload
    def minus(self, other: date | DateSet) -> DateSet | None: ...
    @overload
    def minus(self, other: DateSpan | DateSpanSet) -> DateSpanSet | None: ...
    def subtract_from(self, other: date) -> date | None: ...
    @overload
    def union(self, other: date | DateSet) -> DateSet: ...
    @overload
    def union(self, other: DateSpan | DateSpanSet) -> DateSpanSet: ...
    def plot(self, *args, **kwargs): ...
