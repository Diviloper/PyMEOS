from ..base import Set as Set
from .floatset import FloatSet as FloatSet
from .intspan import IntSpan as IntSpan
from .intspanset import IntSpanSet as IntSpanSet
from typing import overload

class IntSet(Set[int]):
    def to_floatset(self) -> FloatSet: ...
    def start_element(self) -> int: ...
    def end_element(self) -> int: ...
    def element_n(self, n: int) -> int: ...
    def elements(self) -> list[int]: ...
    def shift(self, delta: int) -> IntSet: ...
    def scale(self, width: int) -> IntSet: ...
    def shift_scale(self, delta: int | None, width: int | None) -> IntSet: ...
    def contains(self, content: IntSet | int) -> bool: ...
    def is_left(self, content: IntSet | int) -> bool: ...
    def is_over_or_left(self, content: IntSet | int) -> bool: ...
    def is_right(self, content: IntSet | int) -> bool: ...
    def is_over_or_right(self, content: IntSet | int) -> bool: ...
    @overload
    def intersection(self, other: int) -> int | None: ...
    @overload
    def intersection(self, other: IntSet) -> IntSet | None: ...
    def minus(self, other: IntSet | int) -> IntSet | None: ...
    def subtract_from(self, other: int) -> int | None: ...
    def union(self, other: IntSet | int) -> IntSet: ...
    def distance(self, other: int | IntSet | IntSpan | IntSpanSet) -> int: ...
