from ..base import Set as Set
from .floatspan import FloatSpan as FloatSpan
from .floatspanset import FloatSpanSet as FloatSpanSet
from .intset import IntSet as IntSet
from typing import overload

class FloatSet(Set[float]):
    def to_intset(self) -> IntSet: ...
    def start_element(self) -> float: ...
    def end_element(self) -> float: ...
    def element_n(self, n: int) -> float: ...
    def elements(self) -> list[float]: ...
    def shift(self, delta: float) -> FloatSet: ...
    def scale(self, new_width: float) -> FloatSet: ...
    def shift_scale(self, delta: float | None, new_width: float | None) -> FloatSet: ...
    def contains(self, content: FloatSet | float) -> bool: ...
    def is_left(self, content: FloatSet | float) -> bool: ...
    def is_over_or_left(self, content: FloatSet | float) -> bool: ...
    def is_right(self, content: FloatSet | float) -> bool: ...
    def is_over_or_right(self, content: FloatSet | float) -> bool: ...
    @overload
    def intersection(self, other: float) -> float | None: ...
    @overload
    def intersection(self, other: FloatSet) -> FloatSet | None: ...
    def minus(self, other: FloatSet | float) -> FloatSet | None: ...
    def subtract_from(self, other: float) -> float | None: ...
    def union(self, other: FloatSet | float) -> FloatSet: ...
    def distance(self, other: int | float | FloatSet | FloatSpan | FloatSpanSet) -> float: ...
