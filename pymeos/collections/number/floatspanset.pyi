from ..base import SpanSet as SpanSet
from .floatset import FloatSet as FloatSet
from .floatspan import FloatSpan as FloatSpan
from .intspanset import IntSpanSet as IntSpanSet
from typing import overload

class FloatSpanSet(SpanSet[float]):
    def to_span(self) -> FloatSpan: ...
    def to_intspanset(self) -> IntSpanSet: ...
    def width(self, ignore_gaps: bool | None = False) -> float: ...
    def start_span(self) -> FloatSpan: ...
    def end_span(self) -> FloatSpan: ...
    def span_n(self, n: int) -> FloatSpan: ...
    def spans(self) -> list[FloatSpan]: ...
    def shift(self, delta: int) -> FloatSpanSet: ...
    def scale(self, width: int) -> FloatSpanSet: ...
    def shift_scale(self, delta: int | None, width: int | None) -> FloatSpanSet: ...
    def is_adjacent(self, other: int | FloatSpan | FloatSpanSet) -> bool: ...
    def contains(self, content: int | FloatSpan | FloatSpanSet) -> bool: ...
    def is_same(self, other: int | FloatSpan | FloatSpanSet) -> bool: ...
    def is_left(self, other: int | FloatSpan | FloatSpanSet) -> bool: ...
    def is_over_or_left(self, other: int | FloatSpan | FloatSpanSet) -> bool: ...
    def is_right(self, other: int | FloatSpan | FloatSpanSet) -> bool: ...
    def is_over_or_right(self, other: int | FloatSpan | FloatSpanSet) -> bool: ...
    def distance(self, other: int | float | FloatSet | FloatSpan | FloatSpanSet) -> float: ...
    @overload
    def intersection(self, other: int | float) -> float | None: ...
    @overload
    def intersection(self, other: FloatSpan) -> FloatSpanSet | None: ...
    @overload
    def intersection(self, other: FloatSpanSet) -> FloatSpanSet | None: ...
    def __mul__(self, other): ...
    def minus(self, other: int | FloatSpan | FloatSpanSet) -> FloatSpanSet: ...
    def __sub__(self, other): ...
    def union(self, other: int | FloatSpan | FloatSpanSet) -> FloatSpanSet: ...
    def __add__(self, other): ...
