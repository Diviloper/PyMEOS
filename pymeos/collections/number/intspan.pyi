from ..base import Span as Span
from .floatspan import FloatSpan as FloatSpan
from .intset import IntSet as IntSet
from .intspanset import IntSpanSet as IntSpanSet
from typing import overload

class IntSpan(Span[int]):
    def to_spanset(self) -> IntSpanSet: ...
    def to_floatspan(self) -> FloatSpan: ...
    def lower(self) -> int: ...
    def upper(self) -> int: ...
    def width(self) -> float: ...
    def shift(self, delta: int) -> IntSpan: ...
    def scale(self, width: int) -> IntSpan: ...
    def shift_scale(self, delta: int | None, width: int | None) -> IntSpan: ...
    def is_adjacent(self, other: int | IntSpan | IntSpanSet) -> bool: ...
    def contains(self, content: int | IntSpan | IntSpanSet) -> bool: ...
    def is_same(self, other: int | IntSpan | IntSpanSet) -> bool: ...
    def is_left(self, other: int | IntSpan | IntSpanSet) -> bool: ...
    def is_over_or_left(self, other: int | IntSpan | IntSpanSet) -> bool: ...
    def is_right(self, other: int | IntSpan | IntSpanSet) -> bool: ...
    def is_over_or_right(self, other: int | IntSpan | IntSpanSet) -> bool: ...
    def distance(self, other: int | IntSet | IntSpan | IntSpanSet) -> int: ...
    @overload
    def intersection(self, other: int) -> int | None: ...
    @overload
    def intersection(self, other: IntSpan) -> IntSpan | None: ...
    @overload
    def intersection(self, other: IntSpanSet) -> IntSpanSet | None: ...
    def minus(self, other: int | IntSpan | IntSpanSet) -> IntSpanSet: ...
    def union(self, other: int | IntSpan | IntSpanSet) -> IntSpanSet: ...
