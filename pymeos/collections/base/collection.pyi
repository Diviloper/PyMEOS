import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import Generic, TypeVar

T = TypeVar('T')
Self = TypeVar('Self')

class Collection(ABC, Generic[T], metaclass=abc.ABCMeta):
    @abstractmethod
    def is_contained_in(self, container) -> bool: ...
    @abstractmethod
    def contains(self, content) -> bool: ...
    @abstractmethod
    def __contains__(self, item): ...
    @abstractmethod
    def overlaps(self, other) -> bool: ...
    @abstractmethod
    def is_left(self, other) -> bool: ...
    @abstractmethod
    def is_over_or_left(self, other) -> bool: ...
    @abstractmethod
    def is_over_or_right(self, other) -> bool: ...
    @abstractmethod
    def is_right(self, other) -> bool: ...
    @classmethod
    def read_from_cursor(cls, value, _: Incomplete | None = None): ...
