from pymeos_cffi import *
import abc
from ..number import FloatSet as FloatSet, FloatSpan as FloatSpan, FloatSpanSet as FloatSpanSet, IntSet as IntSet, IntSpan as IntSpan, IntSpanSet as IntSpanSet
from ..time import DateSet as DateSet, DateSpan as DateSpan, DateSpanSet as DateSpanSet, TsTzSet as TsTzSet, TsTzSpan as TsTzSpan, TsTzSpanSet as TsTzSpanSet
from .collection import Collection as Collection
from .span import Span as Span
from .spanset import SpanSet as SpanSet
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import TypeVar, overload

T = TypeVar('T')
Self = TypeVar('Self', bound='Set[Any]')

class Set(Collection[T], ABC, metaclass=abc.ABCMeta):
    def __init__(self, string: str | None = None, *, elements: list[str | T] | None = None, _inner: Incomplete | None = None) -> None: ...
    def __copy__(self) -> Self: ...
    @classmethod
    def from_wkb(cls, wkb: bytes) -> Self: ...
    @classmethod
    def from_hexwkb(cls, hexwkb: str) -> Self: ...
    def as_wkb(self) -> bytes: ...
    def as_hexwkb(self) -> str: ...
    @overload
    def to_span(self) -> IntSpan: ...
    @overload
    def to_span(self) -> FloatSpan: ...
    @overload
    def to_span(self) -> TsTzSpan: ...
    @overload
    def to_span(self) -> DateSpan: ...
    @overload
    def to_spanset(self) -> IntSpanSet: ...
    @overload
    def to_spanset(self) -> FloatSpanSet: ...
    @overload
    def to_spanset(self) -> TsTzSpanSet: ...
    @overload
    def to_spanset(self) -> DateSpanSet: ...
    def num_elements(self) -> int: ...
    def __len__(self) -> int: ...
    @abstractmethod
    def start_element(self) -> T: ...
    @abstractmethod
    def end_element(self) -> T: ...
    @abstractmethod
    def element_n(self, n: int) -> T: ...
    @abstractmethod
    def elements(self) -> list[T]: ...
    def __hash__(self) -> int: ...
    def is_contained_in(self, container) -> bool: ...
    @abstractmethod
    def contains(self, content) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other) -> bool: ...
    def is_left(self, other) -> bool: ...
    def is_over_or_left(self, other) -> bool: ...
    def is_over_or_right(self, other) -> bool: ...
    def is_right(self, other) -> bool: ...
    def distance(self, other) -> None: ...
    @abstractmethod
    def intersection(self, other): ...
    def __mul__(self, other): ...
    @abstractmethod
    def minus(self, other): ...
    def __sub__(self, other): ...
    @abstractmethod
    def subtract_from(self, other): ...
    def __rsub__(self, other): ...
    @abstractmethod
    def union(self, other): ...
    def __add__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
