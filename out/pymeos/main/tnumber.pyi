from pymeos_cffi import *
import abc
from ..boxes import Box as Box, TBox as TBox
from ..collections import (
    FloatSet as FloatSet,
    FloatSpan as FloatSpan,
    FloatSpanSet as FloatSpanSet,
    IntSet as IntSet,
    IntSpan as IntSpan,
    IntSpanSet as IntSpanSet,
    Time as Time,
)
from ..temporal import Temporal as Temporal
from .tfloat import TFloat as TFloat
from .tint import TInt as TInt
from abc import ABC
from typing import TypeVar

TBase = TypeVar("TBase", int, float)
TG = TypeVar("TG", "TNumber[int]", "TNumber[float]")
TI = TypeVar("TI", "TInstant[int]", "TInstant[float]")
TS = TypeVar("TS", "TSequence[int]", "TSequence[float]")
TSS = TypeVar("TSS", "TSequenceSet[int]", "TSequenceSet[float]")
Self = TypeVar("Self", bound="TNumber[Any]")

class TNumber(Temporal[TBase, TG, TI, TS, TSS], ABC, metaclass=abc.ABCMeta):
    def bounding_box(self) -> TBox: ...
    def integral(self) -> float: ...
    def time_weighted_average(self) -> float: ...
    def shift_value(self, delta: int | float) -> Self: ...
    def scale_value(self, width: int | float) -> Self: ...
    def shift_scale_value(
        self, shift: int | float = None, width: int | float = None
    ) -> Self: ...
    def at(
        self,
        other: (
            IntSet
            | FloatSet
            | IntSpan
            | FloatSpan
            | IntSpanSet
            | FloatSpanSet
            | TBox
            | Time
        ),
    ) -> TG: ...
    def minus(
        self,
        other: (
            IntSet
            | FloatSet
            | IntSpan
            | FloatSpan
            | IntSpanSet
            | FloatSpanSet
            | TBox
            | Time
        ),
    ) -> TG: ...
    def is_left(self, other: Temporal | Box) -> bool: ...
    def is_over_or_left(self, other: Temporal | Box) -> bool: ...
    def is_right(self, other: Temporal | Box) -> bool: ...
    def is_over_or_right(self, other: Temporal | Box) -> bool: ...
    def add(self, other: int | float | TNumber) -> TNumber: ...
    def radd(self, other: int | float) -> TNumber: ...
    def sub(self, other: int | float | TNumber) -> TNumber: ...
    def rsub(self, other: int | float) -> TNumber: ...
    def mul(self, other: int | float | TNumber) -> TNumber: ...
    def rmul(self, other: int | float) -> TNumber: ...
    def div(self, other: int | float | TNumber) -> TNumber: ...
    def rdiv(self, other: int | float) -> TNumber: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def abs(self) -> TNumber: ...
    def delta_value(self) -> TNumber: ...
    def distance(self, other: int | float | TNumber) -> TFloat: ...
    def nearest_approach_distance(
        self, other: int | float | TNumber | TBox
    ) -> float: ...
