from pymeos_cffi import *
from ...boxes import Box as Box
from ...temporal import Temporal as Temporal
from ..base.span import Span as Span
from .time import Time as Time
from .timecollection import TimeCollection as TimeCollection
from .tstzset import TsTzSet as TsTzSet
from .tstzspanset import TsTzSpanSet as TsTzSpanSet
from datetime import datetime, timedelta
from dateutil.parser import parse as parse
from typing import overload

class TsTzSpan(Span[datetime], TimeCollection[datetime]):
    def to_spanset(self) -> TsTzSpanSet: ...
    def lower(self) -> datetime: ...
    def upper(self) -> datetime: ...
    def duration(self) -> timedelta: ...
    def shift(self, delta: timedelta) -> TsTzSpan: ...
    def scale(self, duration: timedelta) -> TsTzSpan: ...
    def shift_scale(
        self, shift: timedelta | None = None, duration: timedelta | None = None
    ) -> TsTzSpan: ...
    def is_adjacent(self, other: Time | Box | Temporal) -> bool: ...
    def is_contained_in(
        self, container: TsTzSpan | TsTzSpanSet | Box | Temporal
    ) -> bool: ...
    def contains(self, content: Time | Box | Temporal) -> bool: ...
    def overlaps(self, other: Time | Box | Temporal) -> bool: ...
    def is_same(self, other: Time | Box | Temporal) -> bool: ...
    def is_left(self, other: Time | Box | Temporal) -> bool: ...
    def is_over_or_left(self, other: Time | Box | Temporal) -> bool: ...
    def is_right(self, other: Time | Box | Temporal) -> bool: ...
    def is_over_or_right(self, other: Time | Box | Temporal) -> bool: ...
    def distance(self, other: Time | Box | Temporal) -> timedelta: ...
    @overload
    def intersection(self, other: datetime) -> datetime | None: ...
    @overload
    def intersection(self, other: TsTzSpan) -> TsTzSpan | None: ...
    @overload
    def intersection(self, other: TsTzSet | TsTzSpanSet) -> TsTzSpanSet | None: ...
    def minus(self, other: Time) -> TsTzSpanSet: ...
    def union(self, other: Time) -> TsTzSpanSet: ...
    def plot(self, *args, **kwargs): ...
