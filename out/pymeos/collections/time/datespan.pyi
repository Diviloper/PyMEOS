from ..base import Span as Span
from .dateset import DateSet as DateSet
from .datespanset import DateSpanSet as DateSpanSet
from .time import TimeDate as TimeDate
from .timecollection import TimeCollection as TimeCollection
from .tstzspan import TsTzSpan as TsTzSpan
from datetime import date, timedelta
from dateutil.parser import parse as parse
from typing import overload

class DateSpan(Span[date], TimeCollection[date]):
    def to_spanset(self) -> DateSpanSet: ...
    def to_tstzspan(self) -> TsTzSpan: ...
    def lower(self) -> date: ...
    def upper(self) -> date: ...
    def duration(self) -> timedelta: ...
    def duration_in_days(self) -> float: ...
    def shift(self, delta: timedelta | int) -> DateSpan: ...
    def scale(self, duration: timedelta | int) -> DateSpan: ...
    def shift_scale(
        self,
        shift: int | timedelta | None = None,
        duration: int | timedelta | None = None,
    ) -> DateSpan: ...
    def is_adjacent(self, other: date | DateSpan | DateSpanSet) -> bool: ...
    def contains(self, content: TimeDate) -> bool: ...
    def overlaps(self, other: TimeDate) -> bool: ...
    def is_left(self, other: TimeDate) -> bool: ...
    def is_over_or_left(self, other: TimeDate) -> bool: ...
    def is_right(self, other: TimeDate) -> bool: ...
    def is_over_or_right(self, other: TimeDate) -> bool: ...
    def distance(self, other: TimeDate) -> timedelta: ...
    @overload
    def intersection(self, other: date) -> date | None: ...
    @overload
    def intersection(self, other: DateSpan) -> DateSpan | None: ...
    @overload
    def intersection(self, other: DateSet | DateSpanSet) -> DateSpanSet | None: ...
    def minus(self, other: TimeDate) -> DateSpanSet: ...
    def union(self, other: TimeDate) -> DateSpanSet: ...
    def plot(self, *args, **kwargs): ...
