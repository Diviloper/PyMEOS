from ..base.spanset import SpanSet as SpanSet
from .datespan import DateSpan as DateSpan
from .time import TimeDate as TimeDate
from .timecollection import TimeCollection as TimeCollection
from .tstzspan import TsTzSpan as TsTzSpan
from .tstzspanset import TsTzSpanSet as TsTzSpanSet
from datetime import date, timedelta
from typing import overload

class DateSpanSet(SpanSet[date], TimeCollection[date]):
    def to_span(self) -> DateSpan: ...
    def to_tstzspanset(self) -> TsTzSpanSet: ...
    def duration(self, ignore_gaps: bool | None = False) -> timedelta: ...
    def num_dates(self) -> int: ...
    def start_date(self) -> date: ...
    def end_date(self) -> date: ...
    def date_n(self, n: int) -> date: ...
    def dates(self) -> list[date]: ...
    def start_span(self) -> DateSpan: ...
    def end_span(self) -> DateSpan: ...
    def span_n(self, n: int) -> DateSpan: ...
    def spans(self) -> list[DateSpan]: ...
    def shift(self, delta: timedelta | int) -> DateSpanSet: ...
    def scale(self, duration: timedelta | int) -> DateSpanSet: ...
    def shift_scale(
        self,
        shift: timedelta | int | None = None,
        duration: timedelta | int | None = None,
    ) -> DateSpanSet: ...
    def contains(self, content: TimeDate) -> bool: ...
    def overlaps(self, other: TimeDate) -> bool: ...
    def is_left(self, other: TimeDate) -> bool: ...
    def is_over_or_left(self, other: TimeDate) -> bool: ...
    def is_over_or_right(self, other: TimeDate) -> bool: ...
    def is_right(self, other: TimeDate) -> bool: ...
    def distance(self, other: TimeDate) -> timedelta: ...
    @overload
    def intersection(self, other: date) -> date: ...
    @overload
    def intersection(self, other: DateSpan | DateSpanSet) -> DateSpanSet: ...
    def minus(self, other: TimeDate) -> DateSpanSet: ...
    def union(self, other: TimeDate) -> DateSpanSet: ...
    def plot(self, *args, **kwargs): ...
