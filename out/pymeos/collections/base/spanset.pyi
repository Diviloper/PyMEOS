from pymeos_cffi import *
import abc
from .collection import Collection as Collection
from .span import Span as Span
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import TypeVar

T = TypeVar("T")
Self = TypeVar("Self", bound="Span[Any]")

class SpanSet(Collection[T], ABC, metaclass=abc.ABCMeta):
    def __init__(
        self,
        string: str | None = None,
        *,
        span_list: list[str | Span] | None = None,
        normalize: bool = True,
        _inner: Incomplete | None = None,
    ) -> None: ...
    def __copy__(self) -> Self: ...
    @classmethod
    def from_wkb(cls, wkb: bytes) -> Self: ...
    @classmethod
    def from_hexwkb(cls, hexwkb: str) -> Self: ...
    def as_wkb(self) -> bytes: ...
    def as_hexwkb(self) -> str: ...
    @abstractmethod
    def to_span(self) -> Span: ...
    def num_spans(self) -> int: ...
    @abstractmethod
    def start_span(self) -> Span: ...
    @abstractmethod
    def end_span(self) -> Span: ...
    @abstractmethod
    def span_n(self, n: int) -> Span: ...
    @abstractmethod
    def spans(self) -> list[Span]: ...
    def __hash__(self) -> int: ...
    def is_adjacent(self, other) -> bool: ...
    def is_contained_in(self, container) -> bool: ...
    def contains(self, content) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other) -> bool: ...
    def is_same(self, other) -> bool: ...
    def is_left(self, other) -> bool: ...
    def is_over_or_left(self, other) -> bool: ...
    def is_over_or_right(self, other) -> bool: ...
    def is_right(self, other) -> bool: ...
    def distance(self, other) -> None: ...
    @abstractmethod
    def intersection(self, other): ...
    def __mul__(self, other): ...
    @abstractmethod
    def minus(self, other): ...
    def __sub__(self, other): ...
    @abstractmethod
    def union(self, other): ...
    def __add__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
