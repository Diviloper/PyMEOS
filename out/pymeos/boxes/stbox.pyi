from pymeos_cffi import *
from ..collections import *
import shapely.geometry.base as shp
from ..main import TPoint as TPoint
from ..temporal import Temporal as Temporal
from .box import Box as Box
from _typeshed import Incomplete

class STBox:
    def __init__(
        self,
        string: str | None = None,
        *,
        xmin: str | float | None = None,
        xmax: str | float | None = None,
        ymin: str | float | None = None,
        ymax: str | float | None = None,
        zmin: str | float | None = None,
        zmax: str | float | None = None,
        tmin: str | datetime | None = None,
        tmax: str | datetime | None = None,
        tmin_inc: bool = True,
        tmax_inc: bool = True,
        geodetic: bool = False,
        srid: int | None = None,
        _inner: Incomplete | None = None,
    ) -> None: ...
    def __copy__(self) -> STBox: ...
    @staticmethod
    def from_wkb(wkb: bytes) -> STBox: ...
    @staticmethod
    def from_hexwkb(hexwkb: str) -> STBox: ...
    @staticmethod
    def from_geometry(geom: shp.BaseGeometry, geodetic: bool = False) -> STBox: ...
    @staticmethod
    def from_time(time: Time) -> STBox: ...
    @staticmethod
    def from_geometry_time(
        geometry: shp.BaseGeometry, time: datetime | TsTzSpan, geodetic: bool = False
    ) -> STBox: ...
    @staticmethod
    def from_tpoint(temporal: TPoint) -> STBox: ...
    @staticmethod
    def from_expanding_bounding_box(
        value: shp.BaseGeometry | TPoint | STBox,
        expansion: float,
        geodetic: bool | None = False,
    ) -> STBox: ...
    def as_wkb(self) -> bytes: ...
    def as_hexwkb(self) -> str: ...
    def to_geometry(self, precision: int = 15) -> shp.BaseGeometry: ...
    def to_tstzspan(self) -> TsTzSpan: ...
    def has_xy(self) -> bool: ...
    def has_z(self) -> bool: ...
    def has_t(self) -> bool: ...
    def geodetic(self) -> bool: ...
    def xmin(self) -> float | None: ...
    def ymin(self) -> float | None: ...
    def zmin(self) -> float | None: ...
    def tmin(self) -> datetime | None: ...
    def tmin_inc(self) -> bool: ...
    def xmax(self) -> float | None: ...
    def ymax(self) -> float | None: ...
    def zmax(self) -> float | None: ...
    def tmax(self) -> datetime | None: ...
    def tmax_inc(self) -> bool: ...
    def srid(self) -> int: ...
    def set_srid(self, value: int) -> STBox: ...
    def get_space(self) -> STBox: ...
    def expand(self, other: int | float | timedelta) -> STBox: ...
    def shift_time(self, delta: timedelta) -> STBox: ...
    def scale_time(self, duration: timedelta) -> STBox: ...
    def shift_scale_time(
        self, shift: timedelta | None = None, duration: timedelta | None = None
    ) -> STBox: ...
    def round(self, max_decimals: int | None = 0) -> STBox: ...
    def transform(self, srid: int) -> STBox: ...
    def union(self, other: STBox, strict: bool | None = False) -> STBox: ...
    def __add__(self, other): ...
    def intersection(self, other: STBox) -> STBox | None: ...
    def __mul__(self, other): ...
    def is_adjacent(
        self, other: shp.BaseGeometry | STBox | Temporal | Time
    ) -> bool: ...
    def is_contained_in(
        self, container: shp.BaseGeometry | STBox | Temporal | Time
    ) -> bool: ...
    def contains(self, content: shp.BaseGeometry | STBox | Temporal | Time) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other: shp.BaseGeometry | STBox | Temporal | Time) -> bool: ...
    def is_same(self, other: shp.BaseGeometry | STBox | Temporal | Time) -> bool: ...
    def is_left(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_over_or_left(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_right(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_over_or_right(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_below(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_over_or_below(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_above(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_over_or_above(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_front(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_over_or_front(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_behind(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_over_or_behind(self, other: shp.BaseGeometry | STBox | TPoint) -> bool: ...
    def is_before(self, other: Box | Temporal | Time) -> bool: ...
    def is_over_or_before(self, other: Box | Temporal | Time) -> bool: ...
    def is_after(self, other: Box | Temporal | Time) -> bool: ...
    def is_over_or_after(self, other: Box | Temporal | Time) -> bool: ...
    def nearest_approach_distance(
        self, other: shp.BaseGeometry | STBox | TPoint
    ) -> float: ...
    def quad_split_flat(self) -> list[STBox]: ...
    def quad_split(self) -> list[list[STBox]] | list[list[list[STBox]]]: ...
    def tile(
        self,
        size: float | None = None,
        duration: timedelta | str | None = None,
        origin: shp.BaseGeometry | None = None,
        start: datetime | str | None = None,
    ) -> list[STBox]: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def plot_xy(self, *args, **kwargs): ...
    def plot_xt(self, *args, **kwargs): ...
    def plot_yt(self, *args, **kwargs): ...
    @staticmethod
    def read_from_cursor(value, _: Incomplete | None = None): ...
