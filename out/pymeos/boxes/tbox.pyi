from pymeos_cffi import *
from ..collections import *
from ..main import TFloat as TFloat, TInt as TInt, TNumber as TNumber
from _typeshed import Incomplete

class TBox:
    def __init__(
        self,
        string: str | None = None,
        *,
        xmin: str | int | float | None = None,
        xmax: str | int | float | None = None,
        tmin: str | datetime | None = None,
        tmax: str | datetime | None = None,
        xmin_inc: bool = True,
        xmax_inc: bool = False,
        tmin_inc: bool = True,
        tmax_inc: bool = False,
        _inner: Incomplete | None = None,
    ) -> None: ...
    def __copy__(self) -> TBox: ...
    @staticmethod
    def from_wkb(wkb: bytes) -> TBox: ...
    @staticmethod
    def from_hexwkb(hexwkb: str) -> TBox: ...
    @staticmethod
    def from_value(value: int | float | IntSpan | FloatSpan) -> TBox: ...
    @staticmethod
    def from_time(time: Time) -> TBox: ...
    @staticmethod
    def from_value_time(
        value: int | float | IntSpan | FloatSpan, time: datetime | TsTzSpan
    ) -> TBox: ...
    @staticmethod
    def from_tnumber(temporal: TNumber) -> TBox: ...
    def as_wkb(self) -> bytes: ...
    def as_hexwkb(self) -> str: ...
    def to_floatspan(self) -> FloatSpan: ...
    def to_tstzspan(self) -> TsTzSpan: ...
    def has_x(self) -> bool: ...
    def has_t(self) -> bool: ...
    def xmin(self) -> float: ...
    def xmin_inc(self) -> bool: ...
    def xmax(self) -> float: ...
    def xmax_inc(self) -> bool: ...
    def tmin(self): ...
    def tmin_inc(self) -> bool: ...
    def tmax(self): ...
    def tmax_inc(self) -> bool: ...
    def expand(self, other: int | float | timedelta) -> TBox: ...
    def shift_value(self, delta: int | float) -> TBox: ...
    def shift_time(self, delta: timedelta) -> TBox: ...
    def scale_value(self, width: int | float) -> TBox: ...
    def scale_time(self, duration: timedelta) -> TBox: ...
    def shift_scale_value(
        self, shift: int | float | None = None, width: int | float | None = None
    ) -> TBox: ...
    def shift_scale_time(
        self, shift: timedelta | None = None, duration: timedelta | None = None
    ) -> TBox: ...
    def round(self, max_decimals: int = 0) -> TBox: ...
    def union(self, other: TBox, strict: bool | None = True) -> TBox: ...
    def __add__(self, other): ...
    def intersection(self, other: TBox) -> TBox | None: ...
    def __mul__(self, other): ...
    def is_adjacent(
        self, other: int | float | IntSpan | FloatSpan | TBox | TNumber
    ) -> bool: ...
    def is_contained_in(self, container: TBox | TNumber) -> bool: ...
    def contains(self, content: TBox | TNumber) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def overlaps(self, other: TBox | TNumber) -> bool: ...
    def is_same(self, other: TBox | TNumber) -> bool: ...
    def is_left(self, other: TBox | TNumber) -> bool: ...
    def is_over_or_left(self, other: TBox | TNumber) -> bool: ...
    def is_right(self, other: TBox | TNumber) -> bool: ...
    def is_over_or_right(self, other: TBox | TNumber) -> bool: ...
    def is_before(self, other: TBox | TNumber) -> bool: ...
    def is_over_or_before(self, other: TBox | TNumber) -> bool: ...
    def is_after(self, other: TBox | TNumber) -> bool: ...
    def is_over_or_after(self, other: TBox | TNumber) -> bool: ...
    def nearest_approach_distance(self, other: TBox | TNumber) -> float: ...
    def tile(
        self,
        size: float,
        duration: timedelta | str,
        origin: float = 0.0,
        start: datetime | str | None = None,
    ) -> list[TBox]: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def plot(self, *args, **kwargs): ...
    @staticmethod
    def read_from_cursor(value, _: Incomplete | None = None): ...
